{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Below is an example of a Markdown document that both explains the theoretical framework behind projectile motion and implements a simulation in Python. You can use this as a starting point for your project. Projectile Motion Analysis and Simulation Projectile motion, while seemingly simple, provides a versatile framework for exploring key principles of physics. In this document, we will derive the fundamental equations of motion, analyze the range as a function of the projection angle and other parameters, discuss practical applications, and implement a computational simulation. 1. Theoretical Foundation 1.1 Derivation of the Equations of Motion Consider a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) with respect to the horizontal. Assuming no air resistance and that the only force acting is gravity ( \\( g \\) ), we start with the basic differential equations for the horizontal and vertical components. Horizontal Motion (no acceleration): [ \\frac{d^2x}{dt^2} = 0 \\quad \\Rightarrow \\quad x(t) = v_0 \\cos(\\theta) \\, t + x_0 ] With \\( x_0 = 0 \\) , we have: [ x(t) = v_0 \\cos(\\theta) \\, t ] Vertical Motion (constant acceleration due to gravity): [ \\frac{d^2y}{dt^2} = -g \\quad \\Rightarrow \\quad y(t) = v_0 \\sin(\\theta) \\, t - \\frac{1}{2} g t^2 + y_0 ] Assuming launch from the ground ( \\( y_0 = 0 \\) ): [ y(t) = v_0 \\sin(\\theta) \\, t - \\frac{1}{2} g t^2 ] These equations form the family of solutions for projectile motion. Variations in the initial conditions \\( v_0 \\) , \\( \\theta \\) , and even \\( y_0 \\) (launch height) yield different trajectories, offering a rich parameter space to explore. 1.2 Family of Solutions Dependence on \\( v_0 \\) : A higher initial velocity increases both the horizontal distance and the maximum height reached. Dependence on \\( \\theta \\) : The angle of projection determines the shape of the trajectory. The horizontal range \\( R \\) (assuming launch and landing at the same height) is given by: [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This result comes from solving \\( y(t) = 0 \\) (for \\( t > 0 \\) ) and substituting back into \\( x(t) \\) . Dependence on \\( g \\) : The gravitational acceleration \\( g \\) inversely affects the range and the maximum height. Lower \\( g \\) (as on the Moon) leads to longer ranges and higher trajectories. 2. Analysis of the Range 2.1 Range as a Function of the Projection Angle For a projectile launched from ground level, the horizontal range is: [ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This formula shows a sinusoidal dependence on \\( 2\\theta \\) with a maximum when \\( 2\\theta = 90^\\circ \\) (i.e., \\( \\theta = 45^\\circ \\) ). As \\( \\theta \\) deviates from \\( 45^\\circ \\) , the range decreases. 2.2 Effects of Other Parameters Initial Velocity ( \\( v_0 \\) ) : The range increases quadratically with \\( v_0 \\) . Doubling the speed results in a fourfold increase in range. Gravitational Acceleration ( \\( g \\) ) : The range is inversely proportional to \\( g \\) . A smaller \\( g \\) leads to a longer range. Launch Height ( \\( y_0 \\) ) : For projectiles launched from an elevated position, the time of flight increases, leading to a longer range. The equations become more complex, typically requiring solving a quadratic equation in \\( t \\) . 3. Practical Applications The idealized projectile model can be adapted to more complex real-world situations: Uneven Terrain: When the launch and landing heights differ, the time of flight is determined by solving [ y(t) = y_0 + v_0 \\sin(\\theta) \\, t - \\frac{1}{2} g t^2 = y_{\\text{landing}} ] Air Resistance: Introducing a drag force (often modeled as proportional to the velocity or the square of the velocity) leads to non-linear differential equations that may require numerical solutions. Sports and Engineering: From predicting the flight of a soccer ball to the trajectory of missiles, understanding projectile motion is key in many fields. 4. Implementation Below is an example Python script that uses matplotlib to simulate projectile motion and plot the range as a function of the angle of projection for various initial conditions. # projectile_motion_simulation.py import numpy as np import matplotlib.pyplot as plt def compute_trajectory(v0, theta_deg, g=9.81): \"\"\" Computes the time, x, and y arrays for a projectile launched with initial velocity v0 at an angle theta (in degrees). \"\"\" theta = np.radians(theta_deg) # Time of flight for projectile landing back to y=0 (ignoring launch height) t_flight = 2 * v0 * np.sin(theta) / g t = np.linspace(0, t_flight, num=500) # Trajectory equations x = v0 * np.cos(theta) * t y = v0 * np.sin(theta) * t - 0.5 * g * t**2 return t, x, y def plot_trajectory(v0, theta_deg, g=9.81): t, x, y = compute_trajectory(v0, theta_deg, g) plt.figure(figsize=(8, 4)) plt.plot(x, y, label=f'{theta_deg}\u00b0') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.title(f'Projectile Trajectory (v0 = {v0} m/s, \u03b8 = {theta_deg}\u00b0)') plt.legend() plt.grid(True) plt.show() def range_vs_angle(v0, g=9.81): \"\"\" Computes and plots the horizontal range as a function of the angle of projection. \"\"\" angles = np.linspace(0, 90, 90) ranges = (v0**2 * np.sin(np.radians(2 * angles))) / g plt.figure(figsize=(8, 4)) plt.plot(angles, ranges, 'b-', lw=2) plt.xlabel('Angle of Projection (\u00b0)') plt.ylabel('Range (m)') plt.title(f'Range vs Angle (v0 = {v0} m/s)') plt.grid(True) plt.show() if __name__ == '__main__': # Example parameters initial_velocity = 30 # m/s angles_to_plot = [30, 45, 60] # Plot trajectories for different angles for angle in angles_to_plot: plot_trajectory(initial_velocity, angle) # Plot range vs angle for the given initial velocity range_vs_angle(initial_velocity) How to Run the Simulation Save the Code: Copy the above code into a file named projectile_motion_simulation.py or open it in a Jupyter Notebook cell. Execute the Script: Run the script using: bash python projectile_motion_simulation.py Or run the cell if you are using a notebook. Explore Variations: Adjust parameters such as initial_velocity , g , or add a launch height parameter to see how the trajectory and range are affected. 5. Discussion on Limitations and Extensions 5.1 Limitations of the Idealized Model No Air Resistance: The simulation assumes a vacuum. In reality, drag can significantly affect the projectile\u2019s path. Flat Terrain Assumption: The standard equations assume the projectile lands at the same vertical height from which it was launched. Constant Gravity: In real scenarios (especially in astrophysics), gravity may vary with height. 5.2 Extensions for a More Realistic Model Air Resistance: Incorporate drag forces that are proportional to velocity or the square of the velocity. This generally requires numerical integration (e.g., using scipy.integrate.solve_ivp ). Variable Launch and Landing Heights: Modify the equations to account for different initial and final heights. Wind Effects: Include horizontal wind acceleration to model more complex trajectories. Conclusion This project demonstrates how projectile motion can be explored theoretically and computationally. By deriving the equations of motion, analyzing the range as a function of projection angle and other parameters, and simulating trajectories with Python, one gains both theoretical insights and practical tools for further investigations into physics and engineering applications. Feel free to build upon this framework by adding more realistic features like air resistance and varying terrain, thereby expanding the utility of the model in real-world scenarios. This Markdown document, along with the included Python code, provides a comprehensive overview and a hands-on tool to explore projectile motion.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"Below is an example of a Markdown document that both explains the theoretical framework behind projectile motion and implements a simulation in Python. You can use this as a starting point for your project.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#projectile-motion-analysis-and-simulation","text":"Projectile motion, while seemingly simple, provides a versatile framework for exploring key principles of physics. In this document, we will derive the fundamental equations of motion, analyze the range as a function of the projection angle and other parameters, discuss practical applications, and implement a computational simulation.","title":"Projectile Motion Analysis and Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#11-derivation-of-the-equations-of-motion","text":"Consider a projectile launched with an initial velocity \\( v_0 \\) at an angle \\( \\theta \\) with respect to the horizontal. Assuming no air resistance and that the only force acting is gravity ( \\( g \\) ), we start with the basic differential equations for the horizontal and vertical components. Horizontal Motion (no acceleration): [ \\frac{d^2x}{dt^2} = 0 \\quad \\Rightarrow \\quad x(t) = v_0 \\cos(\\theta) \\, t + x_0 ] With \\( x_0 = 0 \\) , we have: [ x(t) = v_0 \\cos(\\theta) \\, t ] Vertical Motion (constant acceleration due to gravity): [ \\frac{d^2y}{dt^2} = -g \\quad \\Rightarrow \\quad y(t) = v_0 \\sin(\\theta) \\, t - \\frac{1}{2} g t^2 + y_0 ] Assuming launch from the ground ( \\( y_0 = 0 \\) ): [ y(t) = v_0 \\sin(\\theta) \\, t - \\frac{1}{2} g t^2 ] These equations form the family of solutions for projectile motion. Variations in the initial conditions \\( v_0 \\) , \\( \\theta \\) , and even \\( y_0 \\) (launch height) yield different trajectories, offering a rich parameter space to explore.","title":"1.1 Derivation of the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#12-family-of-solutions","text":"Dependence on \\( v_0 \\) : A higher initial velocity increases both the horizontal distance and the maximum height reached. Dependence on \\( \\theta \\) : The angle of projection determines the shape of the trajectory. The horizontal range \\( R \\) (assuming launch and landing at the same height) is given by: [ R = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This result comes from solving \\( y(t) = 0 \\) (for \\( t > 0 \\) ) and substituting back into \\( x(t) \\) . Dependence on \\( g \\) : The gravitational acceleration \\( g \\) inversely affects the range and the maximum height. Lower \\( g \\) (as on the Moon) leads to longer ranges and higher trajectories.","title":"1.2 Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#21-range-as-a-function-of-the-projection-angle","text":"For a projectile launched from ground level, the horizontal range is: [ R(\\theta) = \\frac{v_0^2 \\sin(2\\theta)}{g} ] This formula shows a sinusoidal dependence on \\( 2\\theta \\) with a maximum when \\( 2\\theta = 90^\\circ \\) (i.e., \\( \\theta = 45^\\circ \\) ). As \\( \\theta \\) deviates from \\( 45^\\circ \\) , the range decreases.","title":"2.1 Range as a Function of the Projection Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#22-effects-of-other-parameters","text":"Initial Velocity ( \\( v_0 \\) ) : The range increases quadratically with \\( v_0 \\) . Doubling the speed results in a fourfold increase in range. Gravitational Acceleration ( \\( g \\) ) : The range is inversely proportional to \\( g \\) . A smaller \\( g \\) leads to a longer range. Launch Height ( \\( y_0 \\) ) : For projectiles launched from an elevated position, the time of flight increases, leading to a longer range. The equations become more complex, typically requiring solving a quadratic equation in \\( t \\) .","title":"2.2 Effects of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"The idealized projectile model can be adapted to more complex real-world situations: Uneven Terrain: When the launch and landing heights differ, the time of flight is determined by solving [ y(t) = y_0 + v_0 \\sin(\\theta) \\, t - \\frac{1}{2} g t^2 = y_{\\text{landing}} ] Air Resistance: Introducing a drag force (often modeled as proportional to the velocity or the square of the velocity) leads to non-linear differential equations that may require numerical solutions. Sports and Engineering: From predicting the flight of a soccer ball to the trajectory of missiles, understanding projectile motion is key in many fields.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Below is an example Python script that uses matplotlib to simulate projectile motion and plot the range as a function of the angle of projection for various initial conditions. # projectile_motion_simulation.py import numpy as np import matplotlib.pyplot as plt def compute_trajectory(v0, theta_deg, g=9.81): \"\"\" Computes the time, x, and y arrays for a projectile launched with initial velocity v0 at an angle theta (in degrees). \"\"\" theta = np.radians(theta_deg) # Time of flight for projectile landing back to y=0 (ignoring launch height) t_flight = 2 * v0 * np.sin(theta) / g t = np.linspace(0, t_flight, num=500) # Trajectory equations x = v0 * np.cos(theta) * t y = v0 * np.sin(theta) * t - 0.5 * g * t**2 return t, x, y def plot_trajectory(v0, theta_deg, g=9.81): t, x, y = compute_trajectory(v0, theta_deg, g) plt.figure(figsize=(8, 4)) plt.plot(x, y, label=f'{theta_deg}\u00b0') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Distance (m)') plt.title(f'Projectile Trajectory (v0 = {v0} m/s, \u03b8 = {theta_deg}\u00b0)') plt.legend() plt.grid(True) plt.show() def range_vs_angle(v0, g=9.81): \"\"\" Computes and plots the horizontal range as a function of the angle of projection. \"\"\" angles = np.linspace(0, 90, 90) ranges = (v0**2 * np.sin(np.radians(2 * angles))) / g plt.figure(figsize=(8, 4)) plt.plot(angles, ranges, 'b-', lw=2) plt.xlabel('Angle of Projection (\u00b0)') plt.ylabel('Range (m)') plt.title(f'Range vs Angle (v0 = {v0} m/s)') plt.grid(True) plt.show() if __name__ == '__main__': # Example parameters initial_velocity = 30 # m/s angles_to_plot = [30, 45, 60] # Plot trajectories for different angles for angle in angles_to_plot: plot_trajectory(initial_velocity, angle) # Plot range vs angle for the given initial velocity range_vs_angle(initial_velocity)","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#how-to-run-the-simulation","text":"Save the Code: Copy the above code into a file named projectile_motion_simulation.py or open it in a Jupyter Notebook cell. Execute the Script: Run the script using: bash python projectile_motion_simulation.py Or run the cell if you are using a notebook. Explore Variations: Adjust parameters such as initial_velocity , g , or add a launch height parameter to see how the trajectory and range are affected.","title":"How to Run the Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#5-discussion-on-limitations-and-extensions","text":"","title":"5. Discussion on Limitations and Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#51-limitations-of-the-idealized-model","text":"No Air Resistance: The simulation assumes a vacuum. In reality, drag can significantly affect the projectile\u2019s path. Flat Terrain Assumption: The standard equations assume the projectile lands at the same vertical height from which it was launched. Constant Gravity: In real scenarios (especially in astrophysics), gravity may vary with height.","title":"5.1 Limitations of the Idealized Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#52-extensions-for-a-more-realistic-model","text":"Air Resistance: Incorporate drag forces that are proportional to velocity or the square of the velocity. This generally requires numerical integration (e.g., using scipy.integrate.solve_ivp ). Variable Launch and Landing Heights: Modify the equations to account for different initial and final heights. Wind Effects: Include horizontal wind acceleration to model more complex trajectories.","title":"5.2 Extensions for a More Realistic Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"This project demonstrates how projectile motion can be explored theoretically and computationally. By deriving the equations of motion, analyzing the range as a function of projection angle and other parameters, and simulating trajectories with Python, one gains both theoretical insights and practical tools for further investigations into physics and engineering applications. Feel free to build upon this framework by adding more realistic features like air resistance and varying terrain, thereby expanding the utility of the model in real-world scenarios. This Markdown document, along with the included Python code, provides a comprehensive overview and a hands-on tool to explore projectile motion.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}